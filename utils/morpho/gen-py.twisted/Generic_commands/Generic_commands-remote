#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:twisted
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from Generic_commands import Generic_commands
from Generic_commands.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void job_code_load_lists( list_values)'
  print '   job_code_retrieve_lists( list_numbers)'
  print '   job_code_retrieve_list_indices()'
  print '  void job_code_check_value_against_user(string user_id, i32 jobcode_value)'
  print '   job_code_empty_lists( list_numbers)'
  print '  void job_code_remove_all_lists()'
  print '  Transaction_log_status transaction_log_get_status(Transaction_log_filter filter)'
  print '   transaction_log_retrieve(Transaction_log_filter filter,  required_fields)'
  print '  void transaction_log_delete_all()'
  print '   transaction_log_get_fields()'
  print '   config_get_all_params_name()'
  print '   config_get_params( param_list_UTF8)'
  print '  void config_set_params( param_map)'
  print '   config_get_range( param_keys)'
  print '  cls_authent_user_reply cls_authenticate_user(i32 timeout_in_sec, cls_authent_user_params authent_param)'
  print '  Biofinger_control_operation_reply biofinger_identify(byte database_id, i32 timeout_in_sec, byte threshold, bool enable_intermediate_replies, Biofinger_control_optional_param optional_param)'
  print '  Biofinger_control_operation_reply biofinger_authenticate_db(byte database_id, i32 timeout_in_sec, byte threshold, string user_id_UTF8, bool enable_intermediate_replies, Biofinger_control_optional_param optional_param)'
  print '  Biofinger_control_operation_reply biofinger_authenticate_ref(i32 timeout_in_sec, byte threshold,  ref_template_list, bool enable_intermediate_replies, Biofinger_control_optional_param optional_param)'
  print '  Biofinger_enroll_operation_reply biofinger_enroll(byte database_id, i32 timeout_in_sec, Enrollment_type enrollment_type, byte nb_of_finger, string user_id_UTF8, User_DB_record user_fields, bool enable_intermediate_replies, Biofinger_enroll_optional_param optional_param)'
  print '  bool PIN_authenticate_db(i32 timeout_in_sec, string user_id_UTF8)'
  print '  void reset_factory_settings( list_of_settings)'
  print '  DB_status user_DB_get_status(User_type type)'
  print '   user_DB_get_fields()'
  print '  void user_DB_set_users( users, bool enable_similar_finger_check)'
  print '   user_DB_delete_records( user_IDs_UTF8)'
  print '  void user_DB_delete_all_records()'
  print '   user_DB_get_users( user_IDs_UTF8,  requested_fields)'
  print '   user_DB_get_user_IDs(User_type type)'
  print '  void dynamic_message_set( dm_list)'
  print '   dynamic_message_get( user_IDs_UTF8)'
  print '  void dynamic_message_reset( user_IDs_UTF8)'
  print '   dynamic_message_get_user_IDs()'
  print '  string external_db_get_id()'
  print '  Verify_result_code external_db_verify_user(string user_id_UTF8, User_DB_record user_data)'
  print '  void external_db_clear_id()'
  print '  Cls_info cls_get_info(i32 timeout_in_sec)'
  print '   cls_read(i32 timeout_in_sec, Cls_cards_definition cards)'
  print '  void cls_write(i32 timeout_in_sec, Cls_cards_definition cards)'
  print '  void cls_write_user_card(i32 timeout_in_sec, Cls_user_card card_data)'
  print '  void cls_write_admin_card(i32 timeout_in_sec, Cls_card_type card_type)'
  print '  void cls_erase(i32 timeout_in_sec, Cls_cards_definition cards)'
  print '  void key_load(Crypto_keys crypto_keys)'
  print '  void key_reset( types)'
  print '  void terminal_reboot()'
  print '  string terminal_echo(string buffer)'
  print '  Terminal_configuration terminal_get_configuration(Terminal_configuration_type terminal_settings_type)'
  print '  void terminal_set_configuration(Terminal_configuration terminal_config)'
  print '   time_get_predefined_time_zone_list()'
  print '  void distant_session_set_state(Distant_session_state state)'
  print '  Distant_session_state distant_session_get_state()'
  print '  void cancel_operation()'
  print '  string terminal_get_version(Generic_firmware_type firmware_type)'
  print '   terminal_retrieve_peripherals()'
  print '  Product_info product_get_info( info_type)'
  print '   get_terminal_capabilities( capability_list)'
  print '  void wiegand_clock_data_send_string(string data_to_send)'
  print '  string picture_capture(Picture_interface input_interface, Picture_format format)'
  print '  void picture_display(Picture_format format, string picture_data, XY_coordinates coordinates, i32 duration_in_sec)'
  print '  void display_text(string message_text, XY_coordinates coordinates, i32 duration_in_sec)'
  print '  void file_load(File_details file_details, File_chunk chunk)'
  print '  File_chunk file_get(File_details file_details)'
  print '   file_get_filenames(File_type file_type)'
  print '  void file_erase(File_details file_details)'
  print '  Sdac_status get_sdac_status()'
  print '  void trigger_relay(i32 duration_in_sec)'
  print '   authorized_IP_get_list(IP_protocol_type ip_protocol_type)'
  print '  void authorized_IP_add(string str_ip)'
  print '  void authorized_IP_delete(string str_ip)'
  print '   authorized_IP_get_range_list(IP_protocol_type ip_protocol_type)'
  print '  void authorized_IP_add_range(string str_start_ip, string str_end_ip)'
  print '  void authorized_IP_delete_range(string str_start_ip, string str_end_ip)'
  print '  bool password_set(Sec_obj_ID id, string password_old, string password_new)'
  print '  bool password_verify(Sec_obj_ID id, string password)'
  print '  bool password_reset(Sec_obj_ID id)'
  print '  bool passphrase_set(Passphrase_id id, string passphrase)'
  print '  bool passphrase_reset(Passphrase_id id)'
  print '  string retrieve_keypad_input(i32 timeout_in_sec)'
  print '   access_schedule_retrieve( schedule_index)'
  print '  void access_schedule_store( schedule_data)'
  print '  void access_schedule_delete( schedule_index)'
  print '   door_open_schedule_retrieve()'
  print '  void door_open_schedule_store( schedule_data)'
  print '  void door_open_schedule_delete()'
  print '   holiday_schedule_retrieve( schedule_index)'
  print '  void holiday_schedule_store( schedule_data)'
  print '  void holiday_schedule_delete( schedule_index)'
  print '   scan_WIFI_networks()'
  print '  void events_set_config( events)'
  print '   events_get_config( event_IDs)'
  print '  void licenses_add(string license)'
  print '   licenses_get()'
  print '   config_get_video_phone_params()'
  print '  void config_set_video_phone_params( params_video_phone)'
  print '  void send_to_host(Host_configuration host_config, string data)'
  print '   retrieve_language_file_list()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Generic_commands.Client(protocol)
transport.open()

if cmd == 'job_code_load_lists':
  if len(args) != 1:
    print 'job_code_load_lists requires 1 args'
    sys.exit(1)
  pp.pprint(client.job_code_load_lists(eval(args[0]),))

elif cmd == 'job_code_retrieve_lists':
  if len(args) != 1:
    print 'job_code_retrieve_lists requires 1 args'
    sys.exit(1)
  pp.pprint(client.job_code_retrieve_lists(eval(args[0]),))

elif cmd == 'job_code_retrieve_list_indices':
  if len(args) != 0:
    print 'job_code_retrieve_list_indices requires 0 args'
    sys.exit(1)
  pp.pprint(client.job_code_retrieve_list_indices())

elif cmd == 'job_code_check_value_against_user':
  if len(args) != 2:
    print 'job_code_check_value_against_user requires 2 args'
    sys.exit(1)
  pp.pprint(client.job_code_check_value_against_user(args[0],eval(args[1]),))

elif cmd == 'job_code_empty_lists':
  if len(args) != 1:
    print 'job_code_empty_lists requires 1 args'
    sys.exit(1)
  pp.pprint(client.job_code_empty_lists(eval(args[0]),))

elif cmd == 'job_code_remove_all_lists':
  if len(args) != 0:
    print 'job_code_remove_all_lists requires 0 args'
    sys.exit(1)
  pp.pprint(client.job_code_remove_all_lists())

elif cmd == 'transaction_log_get_status':
  if len(args) != 1:
    print 'transaction_log_get_status requires 1 args'
    sys.exit(1)
  pp.pprint(client.transaction_log_get_status(eval(args[0]),))

elif cmd == 'transaction_log_retrieve':
  if len(args) != 2:
    print 'transaction_log_retrieve requires 2 args'
    sys.exit(1)
  pp.pprint(client.transaction_log_retrieve(eval(args[0]),eval(args[1]),))

elif cmd == 'transaction_log_delete_all':
  if len(args) != 0:
    print 'transaction_log_delete_all requires 0 args'
    sys.exit(1)
  pp.pprint(client.transaction_log_delete_all())

elif cmd == 'transaction_log_get_fields':
  if len(args) != 0:
    print 'transaction_log_get_fields requires 0 args'
    sys.exit(1)
  pp.pprint(client.transaction_log_get_fields())

elif cmd == 'config_get_all_params_name':
  if len(args) != 0:
    print 'config_get_all_params_name requires 0 args'
    sys.exit(1)
  pp.pprint(client.config_get_all_params_name())

elif cmd == 'config_get_params':
  if len(args) != 1:
    print 'config_get_params requires 1 args'
    sys.exit(1)
  pp.pprint(client.config_get_params(eval(args[0]),))

elif cmd == 'config_set_params':
  if len(args) != 1:
    print 'config_set_params requires 1 args'
    sys.exit(1)
  pp.pprint(client.config_set_params(eval(args[0]),))

elif cmd == 'config_get_range':
  if len(args) != 1:
    print 'config_get_range requires 1 args'
    sys.exit(1)
  pp.pprint(client.config_get_range(eval(args[0]),))

elif cmd == 'cls_authenticate_user':
  if len(args) != 2:
    print 'cls_authenticate_user requires 2 args'
    sys.exit(1)
  pp.pprint(client.cls_authenticate_user(eval(args[0]),eval(args[1]),))

elif cmd == 'biofinger_identify':
  if len(args) != 5:
    print 'biofinger_identify requires 5 args'
    sys.exit(1)
  pp.pprint(client.biofinger_identify(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'biofinger_authenticate_db':
  if len(args) != 6:
    print 'biofinger_authenticate_db requires 6 args'
    sys.exit(1)
  pp.pprint(client.biofinger_authenticate_db(eval(args[0]),eval(args[1]),eval(args[2]),args[3],eval(args[4]),eval(args[5]),))

elif cmd == 'biofinger_authenticate_ref':
  if len(args) != 5:
    print 'biofinger_authenticate_ref requires 5 args'
    sys.exit(1)
  pp.pprint(client.biofinger_authenticate_ref(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'biofinger_enroll':
  if len(args) != 8:
    print 'biofinger_enroll requires 8 args'
    sys.exit(1)
  pp.pprint(client.biofinger_enroll(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],eval(args[5]),eval(args[6]),eval(args[7]),))

elif cmd == 'PIN_authenticate_db':
  if len(args) != 2:
    print 'PIN_authenticate_db requires 2 args'
    sys.exit(1)
  pp.pprint(client.PIN_authenticate_db(eval(args[0]),args[1],))

elif cmd == 'reset_factory_settings':
  if len(args) != 1:
    print 'reset_factory_settings requires 1 args'
    sys.exit(1)
  pp.pprint(client.reset_factory_settings(eval(args[0]),))

elif cmd == 'user_DB_get_status':
  if len(args) != 1:
    print 'user_DB_get_status requires 1 args'
    sys.exit(1)
  pp.pprint(client.user_DB_get_status(eval(args[0]),))

elif cmd == 'user_DB_get_fields':
  if len(args) != 0:
    print 'user_DB_get_fields requires 0 args'
    sys.exit(1)
  pp.pprint(client.user_DB_get_fields())

elif cmd == 'user_DB_set_users':
  if len(args) != 2:
    print 'user_DB_set_users requires 2 args'
    sys.exit(1)
  pp.pprint(client.user_DB_set_users(eval(args[0]),eval(args[1]),))

elif cmd == 'user_DB_delete_records':
  if len(args) != 1:
    print 'user_DB_delete_records requires 1 args'
    sys.exit(1)
  pp.pprint(client.user_DB_delete_records(eval(args[0]),))

elif cmd == 'user_DB_delete_all_records':
  if len(args) != 0:
    print 'user_DB_delete_all_records requires 0 args'
    sys.exit(1)
  pp.pprint(client.user_DB_delete_all_records())

elif cmd == 'user_DB_get_users':
  if len(args) != 2:
    print 'user_DB_get_users requires 2 args'
    sys.exit(1)
  pp.pprint(client.user_DB_get_users(eval(args[0]),eval(args[1]),))

elif cmd == 'user_DB_get_user_IDs':
  if len(args) != 1:
    print 'user_DB_get_user_IDs requires 1 args'
    sys.exit(1)
  pp.pprint(client.user_DB_get_user_IDs(eval(args[0]),))

elif cmd == 'dynamic_message_set':
  if len(args) != 1:
    print 'dynamic_message_set requires 1 args'
    sys.exit(1)
  pp.pprint(client.dynamic_message_set(eval(args[0]),))

elif cmd == 'dynamic_message_get':
  if len(args) != 1:
    print 'dynamic_message_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.dynamic_message_get(eval(args[0]),))

elif cmd == 'dynamic_message_reset':
  if len(args) != 1:
    print 'dynamic_message_reset requires 1 args'
    sys.exit(1)
  pp.pprint(client.dynamic_message_reset(eval(args[0]),))

elif cmd == 'dynamic_message_get_user_IDs':
  if len(args) != 0:
    print 'dynamic_message_get_user_IDs requires 0 args'
    sys.exit(1)
  pp.pprint(client.dynamic_message_get_user_IDs())

elif cmd == 'external_db_get_id':
  if len(args) != 0:
    print 'external_db_get_id requires 0 args'
    sys.exit(1)
  pp.pprint(client.external_db_get_id())

elif cmd == 'external_db_verify_user':
  if len(args) != 2:
    print 'external_db_verify_user requires 2 args'
    sys.exit(1)
  pp.pprint(client.external_db_verify_user(args[0],eval(args[1]),))

elif cmd == 'external_db_clear_id':
  if len(args) != 0:
    print 'external_db_clear_id requires 0 args'
    sys.exit(1)
  pp.pprint(client.external_db_clear_id())

elif cmd == 'cls_get_info':
  if len(args) != 1:
    print 'cls_get_info requires 1 args'
    sys.exit(1)
  pp.pprint(client.cls_get_info(eval(args[0]),))

elif cmd == 'cls_read':
  if len(args) != 2:
    print 'cls_read requires 2 args'
    sys.exit(1)
  pp.pprint(client.cls_read(eval(args[0]),eval(args[1]),))

elif cmd == 'cls_write':
  if len(args) != 2:
    print 'cls_write requires 2 args'
    sys.exit(1)
  pp.pprint(client.cls_write(eval(args[0]),eval(args[1]),))

elif cmd == 'cls_write_user_card':
  if len(args) != 2:
    print 'cls_write_user_card requires 2 args'
    sys.exit(1)
  pp.pprint(client.cls_write_user_card(eval(args[0]),eval(args[1]),))

elif cmd == 'cls_write_admin_card':
  if len(args) != 2:
    print 'cls_write_admin_card requires 2 args'
    sys.exit(1)
  pp.pprint(client.cls_write_admin_card(eval(args[0]),eval(args[1]),))

elif cmd == 'cls_erase':
  if len(args) != 2:
    print 'cls_erase requires 2 args'
    sys.exit(1)
  pp.pprint(client.cls_erase(eval(args[0]),eval(args[1]),))

elif cmd == 'key_load':
  if len(args) != 1:
    print 'key_load requires 1 args'
    sys.exit(1)
  pp.pprint(client.key_load(eval(args[0]),))

elif cmd == 'key_reset':
  if len(args) != 1:
    print 'key_reset requires 1 args'
    sys.exit(1)
  pp.pprint(client.key_reset(eval(args[0]),))

elif cmd == 'terminal_reboot':
  if len(args) != 0:
    print 'terminal_reboot requires 0 args'
    sys.exit(1)
  pp.pprint(client.terminal_reboot())

elif cmd == 'terminal_echo':
  if len(args) != 1:
    print 'terminal_echo requires 1 args'
    sys.exit(1)
  pp.pprint(client.terminal_echo(args[0],))

elif cmd == 'terminal_get_configuration':
  if len(args) != 1:
    print 'terminal_get_configuration requires 1 args'
    sys.exit(1)
  pp.pprint(client.terminal_get_configuration(eval(args[0]),))

elif cmd == 'terminal_set_configuration':
  if len(args) != 1:
    print 'terminal_set_configuration requires 1 args'
    sys.exit(1)
  pp.pprint(client.terminal_set_configuration(eval(args[0]),))

elif cmd == 'time_get_predefined_time_zone_list':
  if len(args) != 0:
    print 'time_get_predefined_time_zone_list requires 0 args'
    sys.exit(1)
  pp.pprint(client.time_get_predefined_time_zone_list())

elif cmd == 'distant_session_set_state':
  if len(args) != 1:
    print 'distant_session_set_state requires 1 args'
    sys.exit(1)
  pp.pprint(client.distant_session_set_state(eval(args[0]),))

elif cmd == 'distant_session_get_state':
  if len(args) != 0:
    print 'distant_session_get_state requires 0 args'
    sys.exit(1)
  pp.pprint(client.distant_session_get_state())

elif cmd == 'cancel_operation':
  if len(args) != 0:
    print 'cancel_operation requires 0 args'
    sys.exit(1)
  pp.pprint(client.cancel_operation())

elif cmd == 'terminal_get_version':
  if len(args) != 1:
    print 'terminal_get_version requires 1 args'
    sys.exit(1)
  pp.pprint(client.terminal_get_version(eval(args[0]),))

elif cmd == 'terminal_retrieve_peripherals':
  if len(args) != 0:
    print 'terminal_retrieve_peripherals requires 0 args'
    sys.exit(1)
  pp.pprint(client.terminal_retrieve_peripherals())

elif cmd == 'product_get_info':
  if len(args) != 1:
    print 'product_get_info requires 1 args'
    sys.exit(1)
  pp.pprint(client.product_get_info(eval(args[0]),))

elif cmd == 'get_terminal_capabilities':
  if len(args) != 1:
    print 'get_terminal_capabilities requires 1 args'
    sys.exit(1)
  pp.pprint(client.get_terminal_capabilities(eval(args[0]),))

elif cmd == 'wiegand_clock_data_send_string':
  if len(args) != 1:
    print 'wiegand_clock_data_send_string requires 1 args'
    sys.exit(1)
  pp.pprint(client.wiegand_clock_data_send_string(args[0],))

elif cmd == 'picture_capture':
  if len(args) != 2:
    print 'picture_capture requires 2 args'
    sys.exit(1)
  pp.pprint(client.picture_capture(eval(args[0]),eval(args[1]),))

elif cmd == 'picture_display':
  if len(args) != 4:
    print 'picture_display requires 4 args'
    sys.exit(1)
  pp.pprint(client.picture_display(eval(args[0]),args[1],eval(args[2]),eval(args[3]),))

elif cmd == 'display_text':
  if len(args) != 3:
    print 'display_text requires 3 args'
    sys.exit(1)
  pp.pprint(client.display_text(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'file_load':
  if len(args) != 2:
    print 'file_load requires 2 args'
    sys.exit(1)
  pp.pprint(client.file_load(eval(args[0]),eval(args[1]),))

elif cmd == 'file_get':
  if len(args) != 1:
    print 'file_get requires 1 args'
    sys.exit(1)
  pp.pprint(client.file_get(eval(args[0]),))

elif cmd == 'file_get_filenames':
  if len(args) != 1:
    print 'file_get_filenames requires 1 args'
    sys.exit(1)
  pp.pprint(client.file_get_filenames(eval(args[0]),))

elif cmd == 'file_erase':
  if len(args) != 1:
    print 'file_erase requires 1 args'
    sys.exit(1)
  pp.pprint(client.file_erase(eval(args[0]),))

elif cmd == 'get_sdac_status':
  if len(args) != 0:
    print 'get_sdac_status requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_sdac_status())

elif cmd == 'trigger_relay':
  if len(args) != 1:
    print 'trigger_relay requires 1 args'
    sys.exit(1)
  pp.pprint(client.trigger_relay(eval(args[0]),))

elif cmd == 'authorized_IP_get_list':
  if len(args) != 1:
    print 'authorized_IP_get_list requires 1 args'
    sys.exit(1)
  pp.pprint(client.authorized_IP_get_list(eval(args[0]),))

elif cmd == 'authorized_IP_add':
  if len(args) != 1:
    print 'authorized_IP_add requires 1 args'
    sys.exit(1)
  pp.pprint(client.authorized_IP_add(args[0],))

elif cmd == 'authorized_IP_delete':
  if len(args) != 1:
    print 'authorized_IP_delete requires 1 args'
    sys.exit(1)
  pp.pprint(client.authorized_IP_delete(args[0],))

elif cmd == 'authorized_IP_get_range_list':
  if len(args) != 1:
    print 'authorized_IP_get_range_list requires 1 args'
    sys.exit(1)
  pp.pprint(client.authorized_IP_get_range_list(eval(args[0]),))

elif cmd == 'authorized_IP_add_range':
  if len(args) != 2:
    print 'authorized_IP_add_range requires 2 args'
    sys.exit(1)
  pp.pprint(client.authorized_IP_add_range(args[0],args[1],))

elif cmd == 'authorized_IP_delete_range':
  if len(args) != 2:
    print 'authorized_IP_delete_range requires 2 args'
    sys.exit(1)
  pp.pprint(client.authorized_IP_delete_range(args[0],args[1],))

elif cmd == 'password_set':
  if len(args) != 3:
    print 'password_set requires 3 args'
    sys.exit(1)
  pp.pprint(client.password_set(eval(args[0]),args[1],args[2],))

elif cmd == 'password_verify':
  if len(args) != 2:
    print 'password_verify requires 2 args'
    sys.exit(1)
  pp.pprint(client.password_verify(eval(args[0]),args[1],))

elif cmd == 'password_reset':
  if len(args) != 1:
    print 'password_reset requires 1 args'
    sys.exit(1)
  pp.pprint(client.password_reset(eval(args[0]),))

elif cmd == 'passphrase_set':
  if len(args) != 2:
    print 'passphrase_set requires 2 args'
    sys.exit(1)
  pp.pprint(client.passphrase_set(eval(args[0]),args[1],))

elif cmd == 'passphrase_reset':
  if len(args) != 1:
    print 'passphrase_reset requires 1 args'
    sys.exit(1)
  pp.pprint(client.passphrase_reset(eval(args[0]),))

elif cmd == 'retrieve_keypad_input':
  if len(args) != 1:
    print 'retrieve_keypad_input requires 1 args'
    sys.exit(1)
  pp.pprint(client.retrieve_keypad_input(eval(args[0]),))

elif cmd == 'access_schedule_retrieve':
  if len(args) != 1:
    print 'access_schedule_retrieve requires 1 args'
    sys.exit(1)
  pp.pprint(client.access_schedule_retrieve(eval(args[0]),))

elif cmd == 'access_schedule_store':
  if len(args) != 1:
    print 'access_schedule_store requires 1 args'
    sys.exit(1)
  pp.pprint(client.access_schedule_store(eval(args[0]),))

elif cmd == 'access_schedule_delete':
  if len(args) != 1:
    print 'access_schedule_delete requires 1 args'
    sys.exit(1)
  pp.pprint(client.access_schedule_delete(eval(args[0]),))

elif cmd == 'door_open_schedule_retrieve':
  if len(args) != 0:
    print 'door_open_schedule_retrieve requires 0 args'
    sys.exit(1)
  pp.pprint(client.door_open_schedule_retrieve())

elif cmd == 'door_open_schedule_store':
  if len(args) != 1:
    print 'door_open_schedule_store requires 1 args'
    sys.exit(1)
  pp.pprint(client.door_open_schedule_store(eval(args[0]),))

elif cmd == 'door_open_schedule_delete':
  if len(args) != 0:
    print 'door_open_schedule_delete requires 0 args'
    sys.exit(1)
  pp.pprint(client.door_open_schedule_delete())

elif cmd == 'holiday_schedule_retrieve':
  if len(args) != 1:
    print 'holiday_schedule_retrieve requires 1 args'
    sys.exit(1)
  pp.pprint(client.holiday_schedule_retrieve(eval(args[0]),))

elif cmd == 'holiday_schedule_store':
  if len(args) != 1:
    print 'holiday_schedule_store requires 1 args'
    sys.exit(1)
  pp.pprint(client.holiday_schedule_store(eval(args[0]),))

elif cmd == 'holiday_schedule_delete':
  if len(args) != 1:
    print 'holiday_schedule_delete requires 1 args'
    sys.exit(1)
  pp.pprint(client.holiday_schedule_delete(eval(args[0]),))

elif cmd == 'scan_WIFI_networks':
  if len(args) != 0:
    print 'scan_WIFI_networks requires 0 args'
    sys.exit(1)
  pp.pprint(client.scan_WIFI_networks())

elif cmd == 'events_set_config':
  if len(args) != 1:
    print 'events_set_config requires 1 args'
    sys.exit(1)
  pp.pprint(client.events_set_config(eval(args[0]),))

elif cmd == 'events_get_config':
  if len(args) != 1:
    print 'events_get_config requires 1 args'
    sys.exit(1)
  pp.pprint(client.events_get_config(eval(args[0]),))

elif cmd == 'licenses_add':
  if len(args) != 1:
    print 'licenses_add requires 1 args'
    sys.exit(1)
  pp.pprint(client.licenses_add(args[0],))

elif cmd == 'licenses_get':
  if len(args) != 0:
    print 'licenses_get requires 0 args'
    sys.exit(1)
  pp.pprint(client.licenses_get())

elif cmd == 'config_get_video_phone_params':
  if len(args) != 0:
    print 'config_get_video_phone_params requires 0 args'
    sys.exit(1)
  pp.pprint(client.config_get_video_phone_params())

elif cmd == 'config_set_video_phone_params':
  if len(args) != 1:
    print 'config_set_video_phone_params requires 1 args'
    sys.exit(1)
  pp.pprint(client.config_set_video_phone_params(eval(args[0]),))

elif cmd == 'send_to_host':
  if len(args) != 2:
    print 'send_to_host requires 2 args'
    sys.exit(1)
  pp.pprint(client.send_to_host(eval(args[0]),args[1],))

elif cmd == 'retrieve_language_file_list':
  if len(args) != 0:
    print 'retrieve_language_file_list requires 0 args'
    sys.exit(1)
  pp.pprint(client.retrieve_language_file_list())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
